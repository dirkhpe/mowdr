CREATE TABLE  "MISSINGLINKS" 
   (    "LINK_ID" NUMBER NOT NULL ENABLE, 
    "MISSING_LI" NUMBER, 
    "TYPE" VARCHAR2(50 CHAR), 
    "SHAPE_LENG" NUMBER, 
    "STAAT" NUMBER, 
    "NAAM" VARCHAR2(150 CHAR), 
    "LABEL" VARCHAR2(3 CHAR), 
    "D_TYPE" VARCHAR2(255 CHAR), 
    "D_STAAT" VARCHAR2(255 CHAR), 
    "THE_GEOM_1" VARCHAR2(4000 CHAR), 
    "THE_GEOM_2" VARCHAR2(4000 CHAR), 
    "THE_GEOM_3" VARCHAR2(4000 CHAR), 
    "THE_GEOM_4" VARCHAR2(4000 CHAR), 
    "THE_GEOM_5" VARCHAR2(4000 CHAR), 
    "THE_GEOM_6" VARCHAR2(4000 CHAR), 
    "THE_GEOM_7" VARCHAR2(4000 CHAR), 
    "THE_GEOM_8" VARCHAR2(4000 CHAR), 
     CONSTRAINT "MISSINGLINKS_PK" PRIMARY KEY ("LINK_ID") ENABLE
   )
/
CREATE TABLE  "MOW_DIM_NETWERK_WATERWEGEN" 
   (    "NETWERK_WATERWEGEN_ID" NUMBER NOT NULL ENABLE, 
    "NETWERK_WATERWEGEN_OMSCHR" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "REEKS" CHAR(1 CHAR), 
     CONSTRAINT "MOW_DIM_NETW_WATERW_PK" PRIMARY KEY ("NETWERK_WATERWEGEN_ID") ENABLE
   )
/
CREATE TABLE  "MOW_DIM_PROVINCIE" 
   (    "PROVINCIE_ID" NUMBER, 
    "PROVINCIE_NAAM" VARCHAR2(80 CHAR) NOT NULL ENABLE, 
     CONSTRAINT "MOW_DIM_PROVINCIE_PK" PRIMARY KEY ("PROVINCIE_ID") ENABLE
   )
/
CREATE TABLE  "MOW_DIM_STAAT_MISSING_LINK" 
   (    "STAAT_ID" NUMBER NOT NULL ENABLE, 
    "STAAT_OMSCHRIJVING" VARCHAR2(20 CHAR), 
     CONSTRAINT "MOW_DIM_STAAT_MISSING_LINK_PK" PRIMARY KEY ("STAAT_ID") ENABLE
   )
/
CREATE TABLE  "MOW_DIM_VERVOERSWIJZE" 
   (    "VERVOERSWIJZE_ID" NUMBER NOT NULL ENABLE, 
    "VERVOERSWIJZE_OMSCHR" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
     CONSTRAINT "MOW_DIM_VERVOERSWIJZE_PK" PRIMARY KEY ("VERVOERSWIJZE_ID") ENABLE
   )
/
CREATE TABLE  "MOW_DIM_VOERTUIGTYPE_DL" 
   (    "VOERTUIGTYPE_ID" NUMBER NOT NULL ENABLE, 
    "VOERTUIGTYPE_OMSCHRIJVING" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
     CONSTRAINT "MOW_DIM_VOERTUIGTYPE_DL_PK" PRIMARY KEY ("VOERTUIGTYPE_ID") ENABLE
   )
/
CREATE TABLE  "MOW_DIM_WEERGAVE" 
   (    "WEERGAVE_ID" NUMBER NOT NULL ENABLE, 
    "WEERGAVE_NAAM" VARCHAR2(40 CHAR) NOT NULL ENABLE, 
     CONSTRAINT "MOW_DIM_WEERGAVE_PK" PRIMARY KEY ("WEERGAVE_ID") ENABLE
   )
/
CREATE TABLE  "MOW_FICHE" 
   (    "FICHE_ID" NUMBER NOT NULL ENABLE, 
    "DEFINITIE_BEREKENINGSWIJZE" VARCHAR2(4000 CHAR), 
    "DOEL_METING" VARCHAR2(4000 CHAR), 
    "BELEIDSDOELSTELLING" VARCHAR2(255 CHAR), 
    "BELEIDSDOCUMENT" NUMBER, 
    "GEREL_BELEIDSDOELSTELLING" VARCHAR2(255 CHAR), 
    "GEREL_BELEIDSDOCUMENT" NUMBER, 
    "ACTIE_PROJECT" VARCHAR2(255 CHAR), 
    "TREFWOORD_1" VARCHAR2(30 CHAR), 
    "TREFWOORD_2" VARCHAR2(30 CHAR), 
    "TREFWOORD_3" VARCHAR2(30 CHAR), 
    "TYPE_INDICATOR" NUMBER, 
    "BRON" VARCHAR2(255 CHAR), 
    "MEETTECHNIEKEN" VARCHAR2(4000 CHAR), 
    "MEETEENHEID" VARCHAR2(255 CHAR), 
    "DIMENSIES" VARCHAR2(255 CHAR), 
    "MEETFREQUENTIE" VARCHAR2(255 CHAR), 
    "TIJDSVENSTER" VARCHAR2(255 CHAR), 
    "PUBLICATIEFREQUENTIE" VARCHAR2(255 CHAR), 
    "WEERGAVE" NUMBER, 
    "RESULTAAT_BESCHIKBAAR_VANAF" VARCHAR2(255 CHAR), 
    "STREEFWAARDE" VARCHAR2(4000 CHAR), 
    "GEPUBLICEERD_IN_1" VARCHAR2(255 CHAR), 
    "GEPUBLICEERD_IN_2" VARCHAR2(255 CHAR), 
    "GEPUBLICEERD_IN_3" VARCHAR2(255 CHAR), 
    "AANSPREEKPUNT" VARCHAR2(50 CHAR), 
    "AFDELING" VARCHAR2(255 CHAR), 
    "ENTITEIT" VARCHAR2(255 CHAR), 
    "DATUM_WIJZIGING" DATE, 
    "OPMERKING_1" VARCHAR2(4000 CHAR), 
    "OPMERKING_2" VARCHAR2(4000 CHAR), 
    "OPMERKING_3" VARCHAR2(4000 CHAR), 
    "INDICATOR" VARCHAR2(255 CHAR), 
    "DIMENSIE_ID" NUMBER, 
    "OPMERKING_GRAFIEK" VARCHAR2(1000 CHAR), 
     CONSTRAINT "MOW_FICHE_PK" PRIMARY KEY ("FICHE_ID") ENABLE
   )
/
CREATE TABLE  "MOW_FREQUENTIE" 
   (    "FREQUENTIE_ID" NUMBER NOT NULL ENABLE, 
    "FREQUENTIE_TYPE" NUMBER NOT NULL ENABLE, 
    "JAAR" NUMBER, 
    "JAAR_TOT" NUMBER, 
    "MAAND" NUMBER, 
    "KWARTAAL" NUMBER, 
    "FREQUENTIE_CODE" VARCHAR2(15 CHAR), 
     CONSTRAINT "MOW_FREQUENTIE_PK" PRIMARY KEY ("FREQUENTIE_ID") ENABLE
   )
/
CREATE TABLE  "MOW_FREQUENTIE_TYPE" 
   (    "FREQ_TYPE_ID" NUMBER NOT NULL ENABLE, 
    "FREQ_TYPE_OMSCHRIJVING" VARCHAR2(20 CHAR), 
     CONSTRAINT "MOW_FREQUENTIE_TYPE_PK" PRIMARY KEY ("FREQ_TYPE_ID") ENABLE
   )
/
CREATE TABLE  "MOW_IND_AANT_AFGELEGDE_KM_DL" 
   (    "IND_ID" NUMBER NOT NULL ENABLE, 
    "JAAR" NUMBER NOT NULL ENABLE, 
    "PROVINCIE_ID" NUMBER NOT NULL ENABLE, 
    "VOERTUIGTYPE_ID" NUMBER NOT NULL ENABLE, 
    "VOERTUIGKILOMETER" NUMBER NOT NULL ENABLE, 
     CONSTRAINT "MOW_IND_AANT_AFGEL_KM_DL_PK" PRIMARY KEY ("IND_ID") ENABLE
   )
/
CREATE TABLE  "MOW_IND_AANT_SCHEPEN_WACHT" 
   (    "IND_ID" NUMBER NOT NULL ENABLE, 
    "FREQUENTIE_ID" NUMBER, 
    "JAAR" NUMBER, 
    "MAAND" NUMBER, 
    "PROCENT" NUMBER(5,2), 
     CONSTRAINT "MOW_IND_AANT_SCHEPEN_WACHT_PK" PRIMARY KEY ("IND_ID") ENABLE
   )
/
CREATE TABLE  "MOW_IND_AANT_TONKILOMETER" 
   (    "AANT_TONKILOMETER_ID" NUMBER NOT NULL ENABLE, 
    "NETWERK_WATERWEGEN_ID" NUMBER NOT NULL ENABLE, 
    "JAAR" NUMBER NOT NULL ENABLE, 
    "MAAND" NUMBER NOT NULL ENABLE, 
    "AANTAL" NUMBER NOT NULL ENABLE, 
    "FREQUENTIE_ID" NUMBER, 
     CONSTRAINT "MOW_IND_AANT_TONKILOMETER_PK" PRIMARY KEY ("AANT_TONKILOMETER_ID") ENABLE, 
     CONSTRAINT "MOW_IND_AANT_TONKILOMETER_UK1" UNIQUE ("NETWERK_WATERWEGEN_ID", "JAAR", "MAAND") ENABLE
   )
/
CREATE TABLE  "MOW_IND_AANT_TON_VERVOERD" 
   (    "AANT_TON_VERVOERD_ID" NUMBER, 
    "FREQUENTIE_ID" NUMBER, 
    "NETWERK_WATERWEGEN_ID" NUMBER NOT NULL ENABLE, 
    "AANT_TON_VERVOERD" NUMBER NOT NULL ENABLE, 
    "JAAR" NUMBER, 
    "MAAND" NUMBER, 
     CONSTRAINT "MOW_IND_AANT_TON_VERVOERD_PK" PRIMARY KEY ("AANT_TON_VERVOERD_ID") ENABLE
   )
/
CREATE TABLE  "MOW_IND_BELEIDSDOCUMENT" 
   (    "BELEIDSDOCUMENT_ID" NUMBER NOT NULL ENABLE, 
    "BELEIDSDOCUMENT_NAAM" VARCHAR2(100 CHAR), 
     CONSTRAINT "MOW_IND_BELEIDSDOCUMENT_PK" PRIMARY KEY ("BELEIDSDOCUMENT_ID") ENABLE
   )
/
CREATE TABLE  "MOW_IND_TYPE_INDICATOR" 
   (    "TYPE_INDICATOR_ID" NUMBER NOT NULL ENABLE, 
    "TYPE_INDICATOR_NAAM" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
     CONSTRAINT "MOW_IND_TYPE_INDICATOR_PK" PRIMARY KEY ("TYPE_INDICATOR_ID") ENABLE
   )
/
CREATE TABLE  "MOW_IND_VERDELING_WOONWERK" 
   (    "IND_ID" NUMBER NOT NULL ENABLE, 
    "JAAR" NUMBER, 
    "VERVOERSWIJZE_ID" NUMBER, 
    "PROCENT" NUMBER(5,2), 
     CONSTRAINT "MOW_IND_VERDELING_WOONWERK_PK" PRIMARY KEY ("IND_ID") ENABLE
   )
/
CREATE TABLE  "MOW_MEDEWERKER" 
   (    "MEDEWERKER_ID" NUMBER NOT NULL ENABLE, 
    "LDAP_ID" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
    "NAAM" VARCHAR2(30 CHAR), 
    "VOORNAAM" VARCHAR2(30 CHAR), 
    "INITIALEN" VARCHAR2(10 CHAR), 
    "ACTIEF" CHAR(1 CHAR), 
     CONSTRAINT "MOW_MEDEWERKER_PK" PRIMARY KEY ("MEDEWERKER_ID") ENABLE
   )
/
CREATE TABLE  "TAB_CLOB" 
   (    "NAAM" CLOB
   )
/
CREATE TABLE  "TEST_CLOB" 
   (    "VELD1" CLOB
   )
/
CREATE TABLE  "TST_MISSINGLINKS" 
   (    "LINK_ID" NUMBER NOT NULL ENABLE, 
    "MISSING_LI" NUMBER, 
    "TYPE" VARCHAR2(50 CHAR), 
    "SHAPE_LENG" NUMBER, 
    "STAAT" NUMBER, 
    "NAAM" VARCHAR2(150 CHAR), 
    "LABEL" VARCHAR2(3 CHAR), 
    "D_TYPE" VARCHAR2(255 CHAR), 
    "D_STAAT" VARCHAR2(255 CHAR), 
    "THE_GEOM" LONG, 
     CONSTRAINT "TST_MISSINGLINKS_PK" PRIMARY KEY ("LINK_ID") ENABLE
   )
/
CREATE TABLE  "Z_FREQ_MAANDELIJKS" 
   (    "FREQUENTIE_ID" NUMBER, 
    "JAAR" NUMBER, 
    "MAAND" NUMBER, 
    "FREQUENTIE_CODE" VARCHAR2(30 CHAR), 
     CONSTRAINT "Z_FREQ_MAANDELIJKS_PK" PRIMARY KEY ("FREQUENTIE_ID") ENABLE
   )
/
CREATE TABLE  "Z_IMPORT_FICHE_CSV" 
   (    "FICHE_ID" NUMBER, 
    "INDICATOR" VARCHAR2(255 CHAR), 
    "DEFINITIEBEREKENINGSWIJZE" VARCHAR2(4000 CHAR), 
    "DOEL_VAN_DE_METING" VARCHAR2(4000 CHAR), 
    "BELEIDSDOELSTELLING" VARCHAR2(255 CHAR), 
    "BELEIDSDOCUMENT" VARCHAR2(1 CHAR), 
    "GERELATEERDE_BELEIDSDOELSTELLI" VARCHAR2(255 CHAR), 
    "BELEIDSDOCUMENT_GERELATEERD" VARCHAR2(1 CHAR), 
    "ACTIEPROJECT" VARCHAR2(255 CHAR), 
    "TREFWOORD1" VARCHAR2(30 CHAR), 
    "TREFWOORD2" VARCHAR2(30 CHAR), 
    "TREFWOORD3" VARCHAR2(30 CHAR), 
    "TYPE_INDICATOR" VARCHAR2(1 CHAR), 
    "BRON" VARCHAR2(255 CHAR), 
    "MEETTECHNIEKEN" VARCHAR2(4000 CHAR), 
    "MEETEENHEID" VARCHAR2(255 CHAR), 
    "DIMENSIES" VARCHAR2(255 CHAR), 
    "MEETFREQUENTIE" VARCHAR2(255 CHAR), 
    "TIJDSVENSTER" VARCHAR2(255 CHAR), 
    "PUBLICATIEFREQUENTIE" VARCHAR2(255 CHAR), 
    "WEERGAVE" VARCHAR2(1 CHAR), 
    "RESULTATEN_BESCHIKBAAR_VANAF" VARCHAR2(30 CHAR), 
    "STREEFWAARDE" VARCHAR2(4000 CHAR), 
    "GEPUBLICEERD_IN_1" VARCHAR2(255 CHAR), 
    "GEPUBLICEERD_IN_2" VARCHAR2(255 CHAR), 
    "GEPUBLICEERD_IN_3" VARCHAR2(255 CHAR), 
    "AANSPREEKPUNT" VARCHAR2(30 CHAR), 
    "AFDELING" VARCHAR2(255 CHAR), 
    "ENTITEIT" VARCHAR2(255 CHAR), 
    "LAATST_BIJGEWERKT_OP" DATE, 
    "OPMERKING_1" VARCHAR2(255 CHAR), 
    "OPMERKING_2" VARCHAR2(255 CHAR), 
    "OPMERKING_3" VARCHAR2(255 CHAR), 
     CONSTRAINT "IMPORT_CSV_PK" PRIMARY KEY ("FICHE_ID") ENABLE
   )
/
CREATE TABLE  "Z_IMPORT_FICHE_CSV_2" 
   (    "FICHE_ID" NUMBER, 
    "INDICATOR" VARCHAR2(255 CHAR), 
    "DEFINITIEBEREKENINGSWIJZE" VARCHAR2(4000 CHAR), 
    "DOEL_VAN_DE_METING" VARCHAR2(4000 CHAR), 
    "BELEIDSDOELSTELLING" VARCHAR2(255 CHAR), 
    "BELEIDSDOCUMENT" NUMBER, 
    "GERELATEERDE_BELEIDSDOELSTELLI" VARCHAR2(255 CHAR), 
    "BELEIDSDOCUMENT_GERELATEERD" NUMBER, 
    "ACTIEPROJECT" VARCHAR2(255 CHAR), 
    "TREFWOORD1" VARCHAR2(30 CHAR), 
    "TREFWOORD2" VARCHAR2(30 CHAR), 
    "TREFWOORD3" VARCHAR2(30 CHAR), 
    "TYPE_INDICATOR" NUMBER, 
    "BRON" VARCHAR2(255 CHAR), 
    "MEETTECHNIEKEN" VARCHAR2(4000 CHAR), 
    "MEETEENHEID" VARCHAR2(255 CHAR), 
    "DIMENSIES" VARCHAR2(255 CHAR), 
    "MEETFREQUENTIE" VARCHAR2(255 CHAR), 
    "TIJDSVENSTER" VARCHAR2(255 CHAR), 
    "PUBLICATIEFREQUENTIE" VARCHAR2(255 CHAR), 
    "WEERGAVE" NUMBER, 
    "RESULTATEN_BESCHIKBAAR_VANAF" VARCHAR2(30 CHAR), 
    "STREEFWAARDE" VARCHAR2(4000 CHAR), 
    "GEPUBLICEERD_IN_1" VARCHAR2(255 CHAR), 
    "GEPUBLICEERD_IN_2" VARCHAR2(255 CHAR), 
    "GEPUBLICEERD_IN_3" VARCHAR2(255 CHAR), 
    "AANSPREEKPUNT" VARCHAR2(30 CHAR), 
    "AFDELING" VARCHAR2(255 CHAR), 
    "ENTITEIT" VARCHAR2(255 CHAR), 
    "LAATST_BIJGEWERKT_OP" DATE, 
    "OPMERKING_1" VARCHAR2(255 CHAR), 
    "OPMERKING_2" VARCHAR2(255 CHAR), 
    "OPMERKING_3" VARCHAR2(255 CHAR), 
     CONSTRAINT "IMPORT_CSV_2_PK" PRIMARY KEY ("FICHE_ID") ENABLE
   )
/
CREATE TABLE  "Z_MISSINGLINKS_OTHER" 
   (    "LINK_ID" NUMBER, 
    "MISSING_LI" NUMBER, 
    "TYPE" VARCHAR2(30 CHAR), 
    "STAAT" NUMBER, 
    "NAAM" VARCHAR2(255 CHAR), 
    "LABEL" VARCHAR2(30 CHAR), 
    "D_TYPE" VARCHAR2(30 CHAR), 
    "D_STAAT" VARCHAR2(30 CHAR), 
    "LENGTE" NUMBER, 
    "THE_GEOM_1" VARCHAR2(4000 CHAR), 
    "THE_GEOM_2" VARCHAR2(4000 CHAR), 
    "THE_GEOM_3" VARCHAR2(4000 CHAR), 
    "THE_GEOM_4" VARCHAR2(4000 CHAR), 
    "THE_GEOM_5" VARCHAR2(4000 CHAR), 
    "THE_GEOM_6" VARCHAR2(4000 CHAR), 
    "THE_GEOM_7" VARCHAR2(4000 CHAR), 
    "THE_GEOM_8" VARCHAR2(1 CHAR), 
     CONSTRAINT "Z_MISSINGLINKS_OTH_PK" PRIMARY KEY ("LINK_ID") ENABLE
   )
/
CREATE TABLE  "Z_MISSINGLINKS_SHAPE_LENG" 
   (    "GID" NUMBER, 
    "SHAPE_LENG" NUMBER, 
     CONSTRAINT "Z_MISSINGLINKS_SHAPE_LENG_PK" PRIMARY KEY ("GID") ENABLE
   )
/
CREATE OR REPLACE FUNCTION  "LDAP_AUTHENTICATE" 
(p_username in VARCHAR2, p_password in VARCHAR2) 
return boolean 
is 
  l_ldap_host     VARCHAR2(256) := 'ldapp.vlaanderen.be'; 
  l_ldap_port     VARCHAR2(256) := '389'; 
  l_session       DBMS_LDAP.session; 
  l_session2      DBMS_LDAP.session; 
  l_retval        PLS_INTEGER;  
  l_ldap_user     VARCHAR2(256) := 'uid=et_ivo21_app,ou=admins,o=vlaanderen,c=be'; 
  l_ldap_base     VARCHAR2(256) := 'o=vlaanderen,c=be'; 
  l_dn            VARCHAR2(256); 
  l_attrs         DBMS_LDAP.string_collection; 
  l_message       DBMS_LDAP.message; 
  l_deleted_in_db VARCHAR2(1);  
  l_present_in_db VARCHAR2(1);  
  v_aantal        number; 
BEGIN   
  DBMS_LDAP.USE_EXCEPTION := TRUE; 
  --We halen via een admin de dn van de te valideren gebruiker op. 
  l_session := DBMS_LDAP.init(hostname => l_ldap_host, 
                              portnum  => l_ldap_port); 
  l_retval := DBMS_LDAP.simple_bind_s(ld     => l_session, 
                                      dn     => l_ldap_user, 
                                      passwd => NULL); 
  l_attrs(1) := 'inr'; 
  l_retval := DBMS_LDAP.search_s(ld       => l_session,  
                                 base     => l_ldap_base,  
                                 scope    => DBMS_LDAP.SCOPE_SUBTREE, 
                                 filter   => 'uid=' || p_username,   
                                 attrs    => l_attrs, 
                                 attronly => 1, 
                                 res      => l_message); 
  IF DBMS_LDAP.count_entries(ld => l_session, msg => l_message) > 0 THEN    
    l_dn := DBMS_LDAP.get_dn(ld => l_session, ldapEntry => DBMS_LDAP.first_entry(ld  => l_session, msg => l_message)); 
  ELSE 
    return false; 
  END IF; 
  l_retval := DBMS_LDAP.unbind_s(ld => l_session); 
  
  --We checken of de combinatie gebruikernaam/paswoord juist is    
  l_session := DBMS_LDAP.init(hostname => l_ldap_host, 
                              portnum  => l_ldap_port); 
  l_retval := DBMS_LDAP.simple_bind_s(ld     => l_session, 
                                      dn     => l_dn, 
                                      passwd => p_password);   
  l_retval := DBMS_LDAP.unbind_s(ld => l_session); 
  if p_password is null then 
      return False;
  end if;
  Select count(*) into v_Aantal 
    from MOW_MEDEWERKER mw
   where upper(mw.LDAP_ID) = upper(p_username) 
     and mw.actief = 'J';
  If v_aantal = 0 then
     return false;
  end if;
 
  return true; 
 
EXCEPTION 
  WHEN OTHERS THEN 
    l_retval := DBMS_LDAP.unbind_s(ld => l_session); 
    RETURN false; 
END;
/

CREATE UNIQUE INDEX  "SYS_IL0000087708C00001$$" ON  "TAB_CLOB" (
/
CREATE UNIQUE INDEX  "SYS_IL0000115530C00001$$" ON  "TEST_CLOB" (
/
 CREATE SEQUENCE   "IMPORT_CSV_2_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "IMPORT_CSV_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MISSINGLINKS_SEQ"  MINVALUE 29 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 49 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_DIM_NETW_WATERW_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_DIM_PROVINCIE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_DIM_STAAT_MISSING_LIN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_DIM_VERVOERSWIJZE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_DIM_VOERTUIGTYPE_DL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_DIM_WEERGAVE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_FICHE_SEQ"  MINVALUE 200 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 280 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_FREQUENTIE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1020 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_FREQUENTIE_TYPE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_IND_AANT_AFGEL_KM_SEQ"  MINVALUE 200 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 300 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_IND_AANT_SCHEPEN_WACH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_IND_AANT_TONKILOMETER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_IND_AANT_TON_VERVOERD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 381 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_IND_BELEIDSDOCUMENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_IND_TYPE_INDICATOR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_IND_VERDELING_WOONWER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MOW_MEDEWERKER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "TEST_IMPORT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "Z_FREQ_MAANDELIJKS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "Z_MISSINGLINKS_OTHER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "Z_MISSINGLINKS_OTH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "Z_MISSINGLINKS_SHAPE_LENG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
CREATE OR REPLACE TRIGGER  "MOW_IND_AANT_TON_VERVOERD_T1" 
BEFORE
insert or update or delete on "MOW_IND_AANT_TON_VERVOERD"
for each row
begin
    IF NVL(:NEW.JAAR,0) <> NVL(:OLD.JAAR,0) OR NVL(:NEW.MAAND,0) <> NVL(:OLD.MAAND,0)
    THEN
      IF NVL(:NEW.MAAND,0) <> 0 AND NVL(:NEW.MAAND,0) <> 0 
      THEN
        SELECT FREQUENTIE_ID
          INTO :NEW.FREQUENTIE_ID
          FROM MOW_FREQUENTIE
         WHERE FREQUENTIE_TYPE = 2 AND JAAR = :NEW.JAAR AND MAAND = :NEW.MAAND;
      END IF;
    END IF;

end;
/
ALTER TRIGGER  "MOW_IND_AANT_TON_VERVOERD_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "MOW_IND_AANT_TONKILOMETER_T1" 
BEFORE
insert or update on "MOW_IND_AANT_TONKILOMETER"
for each row
begin
    IF NVL(:NEW.JAAR,0) <> NVL(:OLD.JAAR,0) OR NVL(:NEW.MAAND,0) <> NVL(:OLD.MAAND,0)
    THEN
      IF NVL(:NEW.MAAND,0) <> 0 AND NVL(:NEW.MAAND,0) <> 0 
      THEN
        SELECT FREQUENTIE_ID
          INTO :NEW.FREQUENTIE_ID
          FROM MOW_FREQUENTIE
         WHERE FREQUENTIE_TYPE = 2 AND JAAR = :NEW.JAAR AND MAAND = :NEW.MAAND;
      END IF;
    END IF;
end;
/
ALTER TRIGGER  "MOW_IND_AANT_TONKILOMETER_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "MOW_IND_AANT_SCHEPEN_WACHT_T1" 
BEFORE
insert or update on "MOW_IND_AANT_SCHEPEN_WACHT"
for each row
begin
    IF NVL(:NEW.JAAR,0) <> NVL(:OLD.JAAR,0) OR NVL(:NEW.MAAND,0) <> NVL(:OLD.MAAND,0)
    THEN
      IF NVL(:NEW.MAAND,0) <> 0 AND NVL(:NEW.MAAND,0) <> 0 
      THEN
        SELECT FREQUENTIE_ID
          INTO :NEW.FREQUENTIE_ID
          FROM MOW_FREQUENTIE
         WHERE FREQUENTIE_TYPE = 2 AND JAAR = :NEW.JAAR AND MAAND = :NEW.MAAND;
      END IF;
    END IF;

end;
/
ALTER TRIGGER  "MOW_IND_AANT_SCHEPEN_WACHT_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "MISSINGLINKS_T1" 
BEFORE
insert or update on "MISSINGLINKS"
for each row
begin
IF NVL(:NEW.STAAT,0) <> NVL(:OLD.STAAT,0)
THEN
  SELECT STAAT_OMSCHRIJVING
    INTO :NEW.D_STAAT
    FROM MOW_DIM_STAAT_MISSING_LINK
   WHERE STAAT_ID = :NEW.STAAT;
END IF;
end;
/
ALTER TRIGGER  "MISSINGLINKS_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_Z_MISSINGLINKS_SHAPE_LENG" 
  before insert on "Z_MISSINGLINKS_SHAPE_LENG"              
  for each row 
begin  
  if :new."GID" is null then
    select "Z_MISSINGLINKS_SHAPE_LENG_SEQ".nextval into :new."GID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_Z_MISSINGLINKS_SHAPE_LENG" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_Z_MISSINGLINKS_OTHER" 
  before insert on "Z_MISSINGLINKS_OTHER"              
  for each row 
begin  
  if :new."LINK_ID" is null then
    select "Z_MISSINGLINKS_OTH_SEQ".nextval into :new."LINK_ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_Z_MISSINGLINKS_OTHER" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_Z_FREQ_MAANDELIJKS" 
  before insert on "Z_FREQ_MAANDELIJKS"              
  for each row 
begin  
  if :new."FREQUENTIE_ID" is null then
    select "Z_FREQ_MAANDELIJKS_SEQ".nextval into :new."FREQUENTIE_ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_Z_FREQ_MAANDELIJKS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_MEDEWERKER" 
  before insert on "MOW_MEDEWERKER"               
  for each row  
begin   
  if :NEW."MEDEWERKER_ID" is null then 
    select "MOW_MEDEWERKER_SEQ".nextval into :NEW."MEDEWERKER_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_MEDEWERKER" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_IND_VERDELING_WOONWERK" 
  before insert on "MOW_IND_VERDELING_WOONWERK"               
  for each row  
begin   
  if :NEW."IND_ID" is null then 
    select "MOW_IND_VERDELING_WOONWER_SEQ".nextval into :NEW."IND_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_IND_VERDELING_WOONWERK" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_IND_TYPE_INDICATOR" 
  before insert on "MOW_IND_TYPE_INDICATOR"               
  for each row  
begin   
  if :NEW."TYPE_INDICATOR_ID" is null then 
    select "MOW_IND_TYPE_INDICATOR_SEQ".nextval into :NEW."TYPE_INDICATOR_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_IND_TYPE_INDICATOR" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_IND_BELEIDSDOCUMENT" 
  before insert on "MOW_IND_BELEIDSDOCUMENT"               
  for each row  
begin   
  if :NEW."BELEIDSDOCUMENT_ID" is null then 
    select "MOW_IND_BELEIDSDOCUMENT_SEQ".nextval into :NEW."BELEIDSDOCUMENT_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_IND_BELEIDSDOCUMENT" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_IND_AANT_TON_VERVOERD" 
  before insert on "MOW_IND_AANT_TON_VERVOERD"               
  for each row  
begin   
  if :NEW."AANT_TON_VERVOERD_ID" is null then 
    select "MOW_IND_AANT_TON_VERVOERD_SEQ".nextval into :NEW."AANT_TON_VERVOERD_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_IND_AANT_TON_VERVOERD" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_IND_AANT_TONKILOMETER" 
  before insert on "MOW_IND_AANT_TONKILOMETER"               
  for each row  
begin   
  if :NEW."AANT_TONKILOMETER_ID" is null then 
    select "MOW_IND_AANT_TONKILOMETER_SEQ".nextval into :NEW."AANT_TONKILOMETER_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_IND_AANT_TONKILOMETER" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_IND_AANT_SCHEPEN_WACHT" 
  before insert on "MOW_IND_AANT_SCHEPEN_WACHT"               
  for each row  
begin   
  if :NEW."IND_ID" is null then 
    select "MOW_IND_AANT_SCHEPEN_WACH_SEQ".nextval into :NEW."IND_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_IND_AANT_SCHEPEN_WACHT" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_IND_AANT_AFGELEGDE_KM_D" 
  before insert on "MOW_IND_AANT_AFGELEGDE_KM_DL"               
  for each row  
begin   
  if :NEW."IND_ID" is null then 
    select "MOW_IND_AANT_AFGEL_KM_SEQ".nextval into :NEW."IND_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_IND_AANT_AFGELEGDE_KM_D" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_FREQUENTIE_TYPE" 
  before insert on "MOW_FREQUENTIE_TYPE"               
  for each row  
begin   
  if :NEW."FREQ_TYPE_ID" is null then 
    select "MOW_FREQUENTIE_TYPE_SEQ".nextval into :NEW."FREQ_TYPE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_FREQUENTIE_TYPE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_FREQUENTIE" 
  before insert on "MOW_FREQUENTIE"               
  for each row  
begin   
  if :NEW."FREQUENTIE_ID" is null then 
    select "MOW_FREQUENTIE_SEQ".nextval into :NEW."FREQUENTIE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_FREQUENTIE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_FICHE" 
  before insert on "MOW_FICHE"               
  for each row  
begin   
  if :NEW."FICHE_ID" is null then 
    select "MOW_FICHE_SEQ".nextval into :NEW."FICHE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_FICHE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_DIM_WEERGAVE" 
  before insert on "MOW_DIM_WEERGAVE"               
  for each row  
begin   
  if :NEW."WEERGAVE_ID" is null then 
    select "MOW_DIM_WEERGAVE_SEQ".nextval into :NEW."WEERGAVE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_DIM_WEERGAVE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_DIM_VOERTUIGTYPE_DL" 
  before insert on "MOW_DIM_VOERTUIGTYPE_DL"               
  for each row  
begin   
  if :NEW."VOERTUIGTYPE_ID" is null then 
    select "MOW_DIM_VOERTUIGTYPE_DL_SEQ".nextval into :NEW."VOERTUIGTYPE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_DIM_VOERTUIGTYPE_DL" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_DIM_VERVOERSWIJZE" 
  before insert on "MOW_DIM_VERVOERSWIJZE"               
  for each row  
begin   
  if :NEW."VERVOERSWIJZE_ID" is null then 
    select "MOW_DIM_VERVOERSWIJZE_SEQ".nextval into :NEW."VERVOERSWIJZE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_DIM_VERVOERSWIJZE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_DIM_STAAT_MISSING_LINK" 
  before insert on "MOW_DIM_STAAT_MISSING_LINK"               
  for each row  
begin   
  if :NEW."STAAT_ID" is null then 
    select "MOW_DIM_STAAT_MISSING_LIN_SEQ".nextval into :NEW."STAAT_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_DIM_STAAT_MISSING_LINK" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_DIM_PROVINCIE" 
  before insert on "MOW_DIM_PROVINCIE"               
  for each row  
begin   
  if :NEW."PROVINCIE_ID" is null then 
    select "MOW_DIM_PROVINCIE_SEQ".nextval into :NEW."PROVINCIE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_DIM_PROVINCIE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MOW_DIM_NETWERK_WATERWEGEN" 
  before insert on "MOW_DIM_NETWERK_WATERWEGEN"               
  for each row  
begin   
  if :NEW."NETWERK_WATERWEGEN_ID" is null then 
    select "MOW_DIM_NETW_WATERW_SEQ".nextval into :NEW."NETWERK_WATERWEGEN_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MOW_DIM_NETWERK_WATERWEGEN" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_MISSINGLINKS" 
  before insert on "MISSINGLINKS"               
  for each row  
begin   
  if :NEW."LINK_ID" is null then 
    select "MISSINGLINKS_SEQ".nextval into :NEW."LINK_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_MISSINGLINKS" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_IMPORT_CSV_2" 
  before insert on "Z_IMPORT_FICHE_CSV_2"              
  for each row 
begin  
  if :new."FICHE_ID" is null then
    select "IMPORT_CSV_2_SEQ".nextval into :new."FICHE_ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_IMPORT_CSV_2" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_IMPORT_CSV" 
  before insert on "Z_IMPORT_FICHE_CSV"              
  for each row 
begin  
  if :new."FICHE_ID" is null then
    select "IMPORT_CSV_SEQ".nextval into :new."FICHE_ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_IMPORT_CSV" ENABLE
/
